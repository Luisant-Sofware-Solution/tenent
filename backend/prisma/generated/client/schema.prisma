generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  // previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

enum Role {
  SUPERADMIN
  ADMIN
  USER

  @@schema("public")
}

model Company {
  id            Int        @id @default(autoincrement())
  tenantId      String     @unique
  name          String
  adminEmail    String     @unique
  adminPassword String
  dbUrl         String
  createdAt     DateTime   @default(now())
  status        Boolean
  users         User[]
  categories    Category[]
  units         Unit[]
  taxes         Tax[]
  products      Product[]
  sales         Sales[]

  @@map("Companies")
  @@schema("public")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      String
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  products  Product[]
  customers Customer[]
  sales     Sales[]

  @@map("User")
  @@schema("public")
}

model Category {
  id        Int       @id @default(autoincrement())
  category  String
  companyId Int
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]

  @@map("Category")
  @@schema("public")
}

model Unit {
  id         Int       @id @default(autoincrement())
  name       String
  decimalNOs Int
  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id])
  products   Product[]

  @@map("Unit")
  @@schema("public")
}

model Tax {
  id         Int       @id @default(autoincrement())
  taxName    String
  percentage Decimal
  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id])
  products   Product[]

  @@map("Tax")
  @@schema("public")
}

model Product {
  id                  Int       @id @default(autoincrement())
  itemCode            String
  itemName            String
  shortCode           String?
  printName           String?
  hsnCode             String?
  categoryId          Int
  unitId              Int
  taxId               Int
  prate               Decimal
  srate               Decimal
  mrp                 Decimal
  isActive            Boolean   @default(true)
  userId              Int
  createdDate         DateTime  @default(now())
  modifiedDate        DateTime?
  modifiedUserId      Int?
  imageSaveInLocation String?
  companyId           Int

  // ðŸ”— Relations
  category Category @relation(fields: [categoryId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  tax      Tax      @relation(fields: [taxId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  company  Company  @relation(fields: [companyId], references: [id])
  sales    Sales[]

  @@map("Product")
  @@schema("public")
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String
  mobileNo       String?
  city           String?
  userId         Int
  createdDate    DateTime  @default(now())
  modifiedDate   DateTime?
  modifiedUserId Int?

  user  User    @relation(fields: [userId], references: [id])
  sales Sales[]

  @@map("Customer")
  @@schema("public")
}

model Sales {
  id               Int       @id @default(autoincrement())
  prefix           String?
  billNo           String
  suffix           String?
  date             DateTime
  customerId       Int
  itemId           Int
  qty              Int
  rate             Decimal
  taxPerc          Decimal
  taxAmount        Decimal
  srate            Decimal
  amount           Decimal
  userId           Int
  createdDate      DateTime  @default(now())
  modifiedUserId   Int?
  modifiedDate     DateTime?
  timeOfBill       DateTime?
  timeOfModifyBill DateTime?
  companyId        Int

  // ðŸ”— Relations
  company  Company  @relation(fields: [companyId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [itemId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("Sales")
  @@schema("public")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("superadmin")
  createdAt DateTime @default(now())

  @@map("SuperAdmin")
  @@schema("public")
}
